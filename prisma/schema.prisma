// schema.prisma

generator client {
  provider = "prisma-client-js"
}
  
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
  
model Trainee {
  id        Int     @id @default(autoincrement()) 
  fname     String
  mname     String?
  lname     String
  email     String?
  phone     String   @unique @db.VarChar(15)
  birthdate DateTime?
  coach     Coach? @relation(fields: [coachID], references: [id])
  coachID   Int?
  sessions  Session[]
  payments  Payment[]
  notes     String?

  program   Program? @relation("program", fields: [programID], references: [id])
  programID Int?
  special   Program? @relation("special", fields: [specialID], references: [id])
  specialID Int?
  private   Program? @relation("private", fields: [privateID], references: [id])
  privateID Int?
  
  basic_start DateTime @default(now())
  special_start DateTime @default(now())
  private_start DateTime @default(now())

  createdAt DateTime  @default(now())
}

model Coach {
  id        Int       @id @default(autoincrement()) 
  fname     String
  mname     String?
  lname     String
  image     String?
  email     String?   @unique
  phone     String   @unique @db.VarChar(15)
  birthdate DateTime
  bio       String?
  admin     Boolean? @default(false)
  trainees  Trainee[]
  sessions  Session[]
}

model Session {
  id          Int       @id @default(autoincrement()) 
  createdAt   DateTime  @default(now())
  duration    Float?
  coach       Coach ? @relation(fields: [coachID], references: [id])
  coachID     Int ?
  trainee     Trainee ? @relation(fields: [traineeID], references: [id])
  traineeID   Int ?
  description String ?
  rating      Float?  @default(5)
  private     Boolean?  @default(false)
}

model Program {
  id        Int     @id @default(autoincrement())
  name      String
  cost      Int
  period    String
  duration  Int @default(1)
  description  String
  trainees  Trainee[] @relation("program")
  features  String[]
  badge     String?
  type     String     @default("basic")
  show      Boolean?  @default(true)
  private_trainees  Trainee[] @relation("private")
  special_trainees  Trainee[] @relation("special")
}

model Message {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String?
  message   String?
  read      Boolean @default(false)
  createdAt   DateTime  @default(now())
}

model Payment {
  id          Int       @id @default(autoincrement())
  trainee     Trainee? @relation(fields: [traineeID], references: [id])
  traineeID   Int?
  amount      Int
  note        String?
  expense     Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Settings {
  id            Int       @id @default(autoincrement())
  video         String?
  testimonials  Testimonial[]
  images        String[]
}

model Testimonial {
  id  Int @id @default(autoincrement())
  body      String
  person    String
  position  String
  image     String?
  settingsID   Int? @default(1)
  settings     Settings? @relation(fields: [settingsID], references: [id])
}
